
# Automatically generated by /Users/mshafae/github/cpsc486/cpsc-486-solution-asgt-01/.action/ccsrcutilities.py on 2025-09-30 23:48:35

TARGET = hello_ogl
# C++ Source Code Files
CXXFILES = main.cc app/gl.cc app/glfwapp.cc app/glslshader.cc app/msutil.cc
# C++ Headers Files
HEADERS = hello_scene.h app/glfwapp.h app/glslshader.h app/hid.h app/msutil.h app/scene.h 

DO_UNITTESTS = "False"

CXX = clang++
CXXFLAGS += -x c++ -g -O3 -Wall -pedantic -pipe -std=c++20 -DGLM_FORCE_SWIZZLE -DGLM_ENABLE_EXPERIMENTAL -DGLFW_INCLUDE_NONE -I ./app -I ./glm -I./glad/include
LDFLAGS += -g -O3 -Wall -pedantic -pipe -std=c++20

UNAME_S = $(shell uname -s)
ifeq ($(UNAME_S),Linux)
	CXXFLAGS += -D LINUX
	LDFLAGS += -lGL -lglfw
	SED = sed
	GTESTINCLUDE = -D LINUX
	GTESTLIBS = -L /usr/lib/gcc/x86_64-linux-gnu/11 -lgtest -lgtest_main -lpthread
	GLAD = /usr/bin/glad
	GLADFLAGS = --api gl:core=3.3 --out-path glad c --debug --header-only
endif
ifeq ($(UNAME_S),Darwin)
	ifeq (,$(wildcard "/opt/local/bin/port"))
		# Use MacPorts clang++'s standard library
		CXXFLAGS += -D OSX -I/opt/local/include
		LDFLAGS += -L/opt/local/lib -lglfw
		SED = gsed
		GTESTINCLUDE = -I /opt/local/include -I /opt/local/src/googletest
		GTESTLIBS = -L /opt/local/libexec/llvm-18/lib/libc++ -L /opt/local/libexec/llvm-18/lib -L /opt/local/libexec/llvm-18/lib/libunwind -L /opt/local/lib -lgtest -lgtest_main -lunwind -rpath /opt/local/libexec/llvm-18/lib/libc++ -rpath /opt/local/libexec/llvm-18/lib/libunwind
		GLAD = glad-3.13
		GLADFLAGS = --api gl:core=3.3 --out-path glad c --debug --header-only
	else
		# Use Apple's standard library (not recommended)
		CXXFLAGS += -D OSX
	endif
endif
UNAME_M = $(shell uname -m)
ifeq ($(UNAME_M),x86_64)
	CXXFLAGS += -D AMD64
endif
ifneq ($(filter %86,$(UNAME_M)),)
	CXXFLAGS += -D IA32
endif
ifneq ($(filter arm%,$(UNAME_M)),)
	CXXFLAGS += -D ARM
endif

GTEST_OUTPUT_FORMAT ?= "json"
GTEST_OUTPUT_FILE ?= "test_detail.json"

DOXYGEN = doxygen
DOCDIR = doc

MAKEHEADERS := $(shell command -v makeheaders 2>/dev/null)

OBJECTS = $(CXXFILES:.cc=.o)

DEP = $(CXXFILES:.cc=.d)

MKFILE_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))
PART_PATH := $(dir $(MKFILE_PATH))
LAB_PART := $(notdir $(patsubst %/,%,$(dir $(MKFILE_PATH))))

.SILENT: doc lint format authors test
.PHONY: doc lint format authors glad clean spotless

default all: glad/include/glad/gl.h $(TARGET)

$(TARGET): $(OBJECTS)
	$(CXX) $(LDFLAGS) -o $(TARGET) $(OBJECTS) $(LLDLIBS)

# %.d: %.cc
# 	set -e; $(CXX) -Wall -MM $(CXXFLAGS) $<  > $@; [ -s $@ ] || rm -f $@

glfwapp/%.o: %
	$(CXX) $(CXXFLAGS) -c $< -o $@ -MMD -MP

%.o: %.cc
	$(CXX) $(CXXFLAGS) -c $< -o $@ -MMD -MP

clean:
	-rm -f $(OBJECTS) core $(TARGET).core

spotless: clean cleanunittest
	-rm -f $(TARGET) $(DEP) a.out
	-rm -rf $(DOCDIR)
	-rm -rf $(TARGET).dSYM
	-rm -f compile_commands.json
	-rm -rf glad/include

glad/include/glad/gl.h:
	$(GLAD) $(GLADFLAGS)

doc: $(CXXFILES) $(HEADERS)
	(cat Doxyfile; echo "PROJECT_NAME = $(TARGET)") | $(DOXYGEN) -

compilecmd:
	@echo "$(CXX) $(CXXFLAGS)"

format:
	@python3 .action/checks.py format $(LAB_PART)

lint:
	@python3 .action/checks.py lint $(LAB_PART)

authors:
	@python3 .action/checks.py authors $(LAB_PART)

test:
	@echo "No system tests for $(LAB_PART). Make your own."
#	@python3 .config/system_test.py $(LAB_PART) $(TARGET)

ifneq ($(DO_UNITTESTS), "True")
unittest:
	@echo "No unit tests for $(LAB_PART)"
else
unittest: cleanunittest utest

utest: $(TARGET)_functions.o $(TARGET)_unittest.cc
	@$(CXX) $(CXXFLAGS) $(GTESTINCLUDE) $(LDFLAGS) -o unittest $(TARGET)_unittest.cc $(TARGET)_functions.cc $(GTESTLIBS)
	@./unittest --gtest_output=$(GTEST_OUTPUT_FORMAT):$(GTEST_OUTPUT_FILE)

endif

cleanunittest:
	-@rm -rf unittest.dSYM > /dev/null 2>&1 || true
	-@rm unittest test_detail.json > /dev/null 2>&1 || true

-include $(DEP)


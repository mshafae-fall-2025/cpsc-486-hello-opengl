
from string import Template

root_template = Template("""
# Automatically generated by $file on $now

TOPTARGETS = all clean spotless format lint authors test unittest

SUBDIRS = $(wildcard part-?/.)

default all: all

$(TOPTARGETS): $(SUBDIRS)

$(SUBDIRS):
\t$(MAKE) -f $makefile_name -C $@ $(MAKECMDGOALS)

.PHONY: $(TOPTARGETS) $(SUBDIRS)

""")

part_template = Template("""
# Automatically generated by $file on $now

TARGET = $target
# C++ Source Code Files
CXXFILES = $src $other_src
# C++ Headers Files
HEADERS = $header $other_header

DO_UNITTESTS = "$do_unit_tests"

CXX = $CXX
CXXFLAGS += $CXXFLAGS
LDFLAGS += $LDFLAGS

UNAME_S = $(shell uname -s)
ifeq ($(UNAME_S),Linux)
\tCXXFLAGS += $linux_CXXFLAGS
\tLDFLAGS += $linux_LDFLAGS
\tSED = $linux_sed
\tGTESTINCLUDE = $linux_GTESTINCLUDE
\tGTESTLIBS = $linux_GTESTLIBS
\tGLAD = $linux_GLAD
\tGLADFLAGS = $linux_GLADFLAGS
endif
ifeq ($(UNAME_S),Darwin)
\tifeq (,$(wildcard "/opt/local/bin/port"))
\t\t# Use MacPorts clang++'s standard library
\t\tCXXFLAGS += $darwin_CXXFLAGS
\t\tLDFLAGS += $darwin_LDFLAGS
\t\tSED = $darwin_sed
\t\tGTESTINCLUDE = $darwin_GTESTINCLUDE
\t\tGTESTLIBS = $darwin_GTESTLIBS
\t\tGLAD = $darwin_GLAD
\t\tGLADFLAGS = $darwin_GLADFLAGS
\telse
\t\t# Use Apple's standard library (not recommended)
\t\tCXXFLAGS += -D OSX
\tendif
endif
UNAME_M = $(shell uname -m)
ifeq ($(UNAME_M),x86_64)
\tCXXFLAGS += -D AMD64
endif
ifneq ($(filter %86,$(UNAME_M)),)
\tCXXFLAGS += -D IA32
endif
ifneq ($(filter arm%,$(UNAME_M)),)
\tCXXFLAGS += -D ARM
endif

GTEST_OUTPUT_FORMAT ?= "$GTEST_OUTPUT_FORMAT"
GTEST_OUTPUT_FILE ?= "$GTEST_OUTPUT_FILE"

DOXYGEN = $DOXYGEN
DOCDIR = $DOCDIR

MAKEHEADERS := $(shell command -v makeheaders 2>/dev/null)

OBJECTS = $(CXXFILES:.cc=.o)

DEP = $(CXXFILES:.cc=.d)

MKFILE_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))
PART_PATH := $(dir $(MKFILE_PATH))
LAB_PART := $(notdir $(patsubst %/,%,$(dir $(MKFILE_PATH))))

.SILENT: doc lint format authors test
.PHONY: doc lint format authors glad clean spotless

default all: glad/include/glad/gl.h $(TARGET)

$(TARGET): $(OBJECTS)
\t$(CXX) $(LDFLAGS) -o $(TARGET) $(OBJECTS) $(LLDLIBS)

# %.d: %.cc
# \tset -e; $(CXX) -Wall -MM $(CXXFLAGS) $<  > $@; [ -s $@ ] || rm -f $@

glfwapp/%.o: %
\t$(CXX) $(CXXFLAGS) -c $< -o $@ -MMD -MP

%.o: %.cc
\t$(CXX) $(CXXFLAGS) -c $< -o $@ -MMD -MP

clean:
\t-rm -f $(OBJECTS) core $(TARGET).core

spotless: clean cleanunittest
\t-rm -f $(TARGET) $(DEP) a.out
\t-rm -rf $(DOCDIR)
\t-rm -rf $(TARGET).dSYM
\t-rm -f compile_commands.json
\t-rm -rf glad/include

glad/include/glad/gl.h:
\t$(GLAD) $(GLADFLAGS)

doc: $(CXXFILES) $(HEADERS)
\t(cat Doxyfile; echo "PROJECT_NAME = $(TARGET)") | $(DOXYGEN) -

compilecmd:
\t@echo "$(CXX) $(CXXFLAGS)"

format:
\t@python3 .action/checks.py format $(LAB_PART)

lint:
\t@python3 .action/checks.py lint $(LAB_PART)

authors:
\t@python3 .action/checks.py authors $(LAB_PART)

test:
\t@echo "No system tests for $(LAB_PART). Make your own."
#\t@python3 .config/system_test.py $(LAB_PART) $(TARGET)

ifneq ($(DO_UNITTESTS), "True")
unittest:
\t@echo "No unit tests for $(LAB_PART)"
else
unittest: cleanunittest utest

utest: $gtest_dependencies
\t$gtest_compile_cmd
\t$gtest_run

endif

cleanunittest:
\t-@rm -rf unittest.dSYM > /dev/null 2>&1 || true
\t-@rm unittest test_detail.json > /dev/null 2>&1 || true

-include $(DEP)

""")
